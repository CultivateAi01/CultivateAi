// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profiles {
  id         String   @id @default(uuid())
  clerk_id   String   @unique
  email      String   @unique
  first_name String?
  last_name  String?
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  projects      projects[]
  agent_runs    agent_runs[]
  outputs       outputs[]
  credits       credits?
  transactions  transactions[]

  @@map("profiles")
}

model projects {
  id           String   @id @default(uuid())
  profile_id   String
  title        String
  description  String
  startup_idea String
  status       String   @default("draft") // draft, active, completed, archived
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  // Relations
  profile    profiles     @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  agent_runs agent_runs[]
  outputs    outputs[]

  @@map("projects")
}

model agents {
  id              String   @id @default(uuid())
  name            String
  description     String
  category        String
  cost            Int
  icon            String
  is_active       Boolean  @default(true)
  slug            String?
  agent_url       String?
  output_example  String?
  prompt_template String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  // Relations
  agent_runs agent_runs[]

  @@map("agents")
}

model agent_runs {
  id                String   @id @default(uuid())
  project_id        String
  agent_id          String
  profile_id        String
  status            String   @default("running") // running, completed, failed
  input_data        Json
  execution_time_ms Int?
  error_message     String?
  credits_used      Int
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  // Relations
  project      projects      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  agent        agents        @relation(fields: [agent_id], references: [id])
  profile      profiles      @relation(fields: [profile_id], references: [id])
  outputs      outputs[]
  transactions transactions[]

  @@map("agent_runs")
}

model outputs {
  id           String   @id @default(uuid())
  agent_run_id String
  project_id   String
  profile_id   String
  title        String
  content      String
  format       String   @default("markdown") // markdown, html, json
  metadata     Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  // Relations
  agent_run agent_runs @relation(fields: [agent_run_id], references: [id], onDelete: Cascade)
  project   projects   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  profile   profiles   @relation(fields: [profile_id], references: [id])

  @@map("outputs")
}

model credits {
  id              String   @id @default(uuid())
  profile_id      String   @unique
  balance         Int      @default(0)
  total_purchased Int      @default(0)
  total_used      Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  // Relations
  profile profiles @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("credits")
}

model transactions {
  id                      String   @id @default(uuid())
  profile_id              String
  type                    String   // purchase, usage, refund
  amount                  Int
  description             String
  stripe_payment_intent_id String?
  agent_run_id            String?
  created_at              DateTime @default(now())

  // Relations
  profile   profiles    @relation(fields: [profile_id], references: [id])
  agent_run agent_runs? @relation(fields: [agent_run_id], references: [id])

  @@map("transactions")
}